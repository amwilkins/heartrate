---
title: "FitBit Heart Rate Data"
format:
  html:
    code-fold: true
    embed-resources: true
jupyter: python3
---

```{python}
#| include: False
import os
import pandas as pd
import glob
import datetime as dt

today =	dt.date.today()

```
<sub> Updated `{python} dt.date.today().isoformat()` </sub>

This covers heartrate data gathered roughly every 15 seconds by the FitBit Inspire 2, model FB418. 



## Data

```{python}

# Don't use scientific notation
pd.options.display.float_format = '{:.0f}'.format

if os.path.exists("./data/heart_rate_combined.pkl"):
    df = pd.read_pickle("./data/heart_rate_combined.pkl")
else:
    file_list = glob.glob("./fitbit_data/heart_rate-*.json")
    data_frames = [pd.read_json(file) for file in file_list]
    df = pd.concat(data_frames)
    df['dateTime'] = df['dateTime'].dt.tz_localize("UTC")
    df['dateTime'] = df['dateTime'].dt.tz_convert("US/Central")
    df['year-month'] = df['dateTime'].dt.strftime("%Y-%m")
    df['year'] = df['dateTime'].dt.year
    df['month'] = df['dateTime'].dt.month
    df['day'] = df['dateTime'].dt.day
    df["bpm"] = [i["bpm"] for i in df["value"]]
    df = df.drop(columns=["value"])
    df.to_pickle("./data/heart_rate_combined.pkl")


```

Data is held as a series of daily json files, which are loaded and concatenated into a Pandas dataframe.
The dataframe consists of the datetime in ISO format and bpm, with this analysis consisting of `{python} len(df)` datapoints.
Other fields are created for ease of parsing later.

A sample of the data format is provided here:
```{python}
#| echo: false
print(df.tail(3))

```


<!-- Possible dates to mark:   -->
<!-- 2022-12-02 - 2022-12-11 - Spain Vacation   -->
<!-- 2024-05-05 - 2024-05-13 - Italy Vacation   -->
<!-- 2024-06-01 - Ongoing - Move into new apart``ment   -->
<!-- 2024-12-07 - 2024-12-14 - Canada Vacation   -->

## Plotting:

::: {.panel-tabset}
## Trend
```{python}
#| warning: false
from plotnine import *
from mizani.breaks import date_breaks

# Prep daily df
daily = df.groupby(['year','month','day'])['bpm'].mean().reset_index()
daily['date'] = daily['year'].astype(str) + "-" +  daily['month'].astype(str) +  "-" + daily['day'].astype(str)
daily['date'] = pd.to_datetime(daily['date'])

# Plot
(
    ggplot(daily, aes(x="date", y="bpm", group = 1))
    + geom_line()
    + scale_x_date(breaks=date_breaks(width="3 months"),date_minor_breaks="3 months")
    + geom_smooth(span=.2)
    + labs(x = "Date", 
      y = "Heartrate in BPM", 
      title = "Daily Average Heartrate")
		+ theme(
		 	axis_text_x=element_text(rotation=25, hjust=1),
		 	panel_grid=element_line(color="grey")
		 )    
		+ geom_vline(xintercept=[dt.date(2024,5,1)], linetype="dashed", color="grey")
		+ annotate(geom="label",fill="grey",color="black",label="Moved to St. Louis", x=dt.date(2024,5,1), y=108)
)
 
```
## Yearly
```{python}
#| warning: false
(
    ggplot(daily, aes(x="date", y="bpm", group = "year"))
    + geom_line()
    + scale_x_date(breaks=date_breaks(width="3 months"),date_minor_breaks="3 months")
    + geom_smooth(method="lm")
    + labs(x = "Date", 
      y = "Heartrate in BPM", 
      title = "Daily Average Heartrate")
		+ theme(
		 	axis_text_x=element_text(rotation=25, hjust=1),
		 	panel_grid=element_line(color="grey")
		 )    
		+ geom_vline(xintercept=[dt.date(2024,5,1)], linetype="dashed", color="grey")
		+ annotate(geom="label",fill="grey",color="black",label="Moved to St. Louis", x=dt.date(2024,5,1), y=108)
)

```

:::
```{python}
df['hour'] = df['dateTime'].dt.hour

hourly = df.loc[df['year'] == 2024].groupby(['hour'], as_index= False)['bpm'].mean()

(
    ggplot(hourly[['hour','bpm']], aes(x="hour", y="bpm", group = 1))
    + geom_line()
		+ scale_x_continuous(limits=(0,24),breaks=range(0, 24, 1))
    + labs(x = "Hour", 
      y = "Heartrate in BPM", 
      title = "Hourly Average Heartrate over 2024")
		+ theme_538()
)


```

## Between 1AM and 5AM


```{python}
last_month = df.loc[(df['year'] == 2024) & (df['hour'].between(0,7))].groupby(['hour'], as_index= False)['bpm'].mean()

(
    ggplot(last_month[['hour','bpm']], aes(x="hour", y="bpm", group = 1))
    + geom_line()
		+ scale_x_continuous(limits=(0,7),breaks=range(0, 7, 1))
    + labs(x = "Hour", 
      y = "Heartrate in BPM", 
      title = "Average heartrate during Sleeping Hours, 2024")
		+ theme_538()
)

```




